name: Deploy to Cloud Run # Name des Workflows, sichtbar in GitHub Actions UI

on:
  push:
    branches:
      - main # Dieser Workflow wird ausgeführt, wenn Änderungen in den 'main'-Branch gepusht werden
  workflow_dispatch: # Ermöglicht das manuelle Auslösen des Workflows über die GitHub Actions UI

env:
  PROJECT_ID: '396694012221' # Ihre Google Cloud Projektnummer
  SERVICE_NAME: 'podcast-tracker-app' # Der Name Ihres Cloud Run Dienstes
  REGION: 'europe-west3' # Ihre Cloud Run Region
  IMAGE_NAME: 'gcr.io/396694012221/podcast-tracker-app' # Das Docker-Image in Google Artifact Registry

jobs:
  deploy:
    runs-on: ubuntu-latest # Der Runner, auf dem der Workflow ausgeführt wird
    permissions:
      contents: 'read' # Erforderlich, um den Code aus dem Repository auszulesen
      id-token: 'write' # Erforderlich für Workload Identity Federation (OIDC-Authentifizierung)

    steps:
      - name: Checkout code # Schritt zum Klonen des Repositorys auf den Runner
        uses: actions/checkout@v4

      # DEBUGGING-SCHRITT: Zeigt den Inhalt des OIDC-Tokens an
      # Dieser Schritt muss VOR der Authentifizierung bei Google Cloud liegen
      # und verwendet curl/jq für Robustheit
      - name: Debug OIDC Token Subject
        run: |
          # Fordert ein OIDC-Token an und extrahiert den 'sub'-Claim
          # Die Audience hier MUSS mit der Audience im 'Authenticate to Google Cloud' Schritt übereinstimmen
          TOKEN_REQUEST_URL="$ACTIONS_ID_TOKEN_REQUEST_URL"
          TOKEN_REQUEST_TOKEN="$ACTIONS_ID_TOKEN_REQUEST_TOKEN"
          AUDIENCE="https://github.com/${{ github.repository }}" # Muss mit der Audience im Auth-Schritt übereinstimmen

          # Überprüfen, ob die Umgebungsvariablen gesetzt sind
          if [ -z "$TOKEN_REQUEST_URL" ] || [ -z "$TOKEN_REQUEST_TOKEN" ]; then
            echo "Fehler: ACTIONS_ID_TOKEN_REQUEST_URL oder ACTIONS_ID_TOKEN_REQUEST_TOKEN nicht gesetzt (unerwartet)."
            echo "Bitte stellen Sie sicher, dass 'id-token: write' in den Job-Berechtigungen vorhanden ist."
            exit 1
          fi

          # Fordert das OIDC-Token mit curl an
          TOKEN_RESPONSE=$(curl -s -X POST \
                                -H "Authorization: Bearer $TOKEN_REQUEST_TOKEN" \
                                -H "Content-Type: application/json" \
                                -d "{\"audience\": \"$AUDIENCE\"}" \
                                "$TOKEN_REQUEST_URL")
          
          # Extrahiert den JWT-Wert aus der JSON-Antwort
          TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.value')

          if [ -z "$TOKEN" ]; then
            echo "Fehler: Konnte OIDC-Token nicht abrufen. Antwort: $TOKEN_RESPONSE"
            exit 1
          fi

          echo "Raw OIDC Token:"
          echo "$TOKEN"

          echo "OIDC Token Payload (base64 decoded):"
          echo "$TOKEN" | cut -d'.' -f2 | base64 -d | jq .

          echo "Extracted 'sub' claim:"
          echo "$TOKEN" | cut -d'.' -f2 | base64 -d | jq -r .sub

          echo "Extracted 'repository' claim:"
          echo "$TOKEN" | cut -d'.' -f2 | base64 -d | jq -r .repository
        # Fügen Sie 'continue-on-error: true' hinzu, damit der Workflow auch bei Fehlern in diesem Schritt fortgesetzt wird
        continue-on-error: true 

      - name: Authenticate to Google Cloud # Schritt zur Authentifizierung bei Google Cloud mit Workload Identity Federation
        id: 'auth' # ID für diesen Schritt, falls seine Ausgaben später benötigt werden
        uses: 'google-github-actions/auth@v2' # Offizielle GitHub Action für Google Cloud Authentifizierung
        with:
          # Der vollständige Ressourcenname Ihres Workload Identity Providers in Google Cloud
          # Ersetzt durch Ihre spezifischen IDs: github-pool-tsp und github-actions-tsp
          workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool-tsp/providers/github-actions-tsp'
          # Die E-Mail-Adresse des Service Accounts, dessen Identität angenommen werden soll
          service_account: 'github-actions-deployer@amiable-mix-465520-u7.iam.gserviceaccount.com'
          # KORRIGIERT: Die 'audience' muss dem Wert entsprechen, den GitHub tatsächlich sendet (vollständiger Repository-Pfad)
          # Basierend auf dem Log ist der tatsächlich ausgestellte 'aud' Claim: https://github.com/thspeil
          audience: 'https://github.com/thspeil/PodTracker-DB' 

      - name: Set up Docker Buildx # Schritt zur Einrichtung von Docker Buildx für effizientes Image-Building
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image # Schritt zum Bauen und Hochladen des Docker-Images
        uses: docker/build-push-action@v5 # Offizielle GitHub Action zum Bauen und Pushen von Docker-Images
        with:
          push: true # Image soll in die Registry gepusht werden
          tags: ${{ env.IMAGE_NAME }}:latest # Taggt das Image mit 'latest'
          context: . # Der Build-Kontext ist das aktuelle Verzeichnis (wo das Dockerfile liegt)
          cache-from: type=gha # Nutzt GitHub Actions Cache für schnellere Builds
          cache-to: type=gha,mode=max # Speichert Build-Cache für zukünftige Builds

      - name: Deploy to Cloud Run # Schritt zum Bereitstellen des Docker-Images auf Google Cloud Run
        uses: 'google-github-actions/deploy-cloudrun@v2' # Offizielle GitHub Action zum Bereitstellen auf Cloud Run
        with:
          service: ${{ env.SERVICE_NAME }} # Name des Cloud Run Dienstes
          image: ${{ env.IMAGE_NAME }}:latest # Das Image, das bereitgestellt werden soll
          region: ${{ env.REGION }} # Die Region, in der der Dienst bereitgestellt wird
          # Umgebungsvariablen, die an die Cloud Run-Anwendung übergeben werden
          env_vars: |
            DATABASE_URL=${{ secrets.NEON_DATABASE_URL }} # Lädt die Datenbank-URL sicher aus dem GitHub Secret
          # Zusätzliche Flags für den gcloud run deploy Befehl
          flags: --allow-unauthenticated --port 5000
